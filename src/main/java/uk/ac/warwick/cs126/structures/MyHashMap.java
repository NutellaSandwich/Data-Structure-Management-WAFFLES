package uk.ac.warwick.cs126.structures;

@SuppressWarnings("unchecked") 

/** Class for implementing MyHashMap and operations related. */
public class MyHashMap<K extends Comparable<K>,V>{

    protected KeyValuePairLinkedList[] table;
    
    /** Initialise variables. 
     * Large Prime Number for hash value to avoid collisions. 
    */
    public MyHashMap() {
        this(2657);
    }
    
    /** Initialise variables. 
     * Creates and initalised new table of Key Value Pair Linked lists. 
    */
    public MyHashMap(int size) {
        table = new KeyValuePairLinkedList[size];
        initTable();
    }

    /** Finds if a key is contained within the Hash Map. 
     * 
     * @param key                   Key for Hashing. 
     * 
     * @return True or False for whether the Key has been found. 
    */
    public boolean find(K key) {
        int hash_code = hash(key);
        int location = hash_code % table.length;

        boolean found = false;

        ListElement<KeyValuePair> ptr = table[location].head;

        while (found == false){
            if(ptr==null){
                return false;
            }
            else if (ptr.getValue().getKey().equals(key)==true){
                found = true;
            }
            else{
                ptr = ptr.getNext();
            }
        }
        return found;
    }
    
    /** Initalise Key Value Pair Linked List Table */
    protected void initTable() {
        for(int i = 0; i < table.length; i++) {
            table[i] = new KeyValuePairLinkedList<>();
        }
    }
    
    /** Generates hash code from key 
     * 
     * @param key                   Key for Hashing.
     * 
     * Ensures code isn't less than 0. 
     * 
     * @return Hash Code.
    */
    protected int hash(K key) {
        int code = key.hashCode();
        if(code<0){
            code = code*-1;
        }
        return code;    
    }
    
    /** Adds a Value at Location generated by Key.
     * 
     * @param key                       Key for Hashing.
     * @param value                     Generic Element to be added to Hash Map.
     * 
     * Uses table length for location generation.
    */
    public void add(K key, V value) {
        int hash_code = hash(key);
        int location = hash_code % table.length;        
        table[location].add(key,value);
    }

    /** Gets the value stored in the Hash Map for a given key.
     * 
     * @param key                   Key for Hashing.
     * 
     * Generates locaation and gets the value at that location.
     * 
     * @return Element stored at location with key. 
    */
    public V get(K key) {
        int hash_code = hash(key);
        int location = hash_code % table.length;
        
        ListElement<KeyValuePair> ptr = table[location].head;
        
        return (V)table[location].get(key).getValue();
    }

    /** Removes element at location relative to key.
     * 
     * @param key                   Key for Hashing.
    */
    public void remove(K key){
        int hash_code = hash(key);
        int location = hash_code % table.length;

        table[location].remove(key);
    }
}